#!/bin/busybox ash
# Install busybox's applets as symlinks
/bin/busybox --install -s

. /init_functions

msg ":: Loading Initramfs"
mount -t proc proc /proc
mount -t sysfs sys /sys
if grep -q devtmpfs /proc/filesystems 2>/dev/null; then
  mount -n -t devtmpfs udev /dev -o mode=0755,size=10M,nosuid
  devtmpfs_mounted=1
else
  mount -n -t tmpfs udev /dev -o mode=0755,size=10M,nosuid
  devtmpfs_mounted=0
  # We don't have devtmpfs, so add the most important standard devices
  mknod /dev/null c 1 3
  mknod /dev/zero c 1 5
  mknod /dev/console c 5 1
  # /dev/mem is needed if we want to load uvesafb before triggering uevents
  mknod /dev/mem c 1 1
fi
mount -t tmpfs run /run -o nosuid,noexec,nodev,mode=755,size=10M

mkdir /dev/pts
mount -t devpts devpts /dev/pts

mkdir /dev/shm
mount -t tmpfs none /dev/shm

export root=""
export init=""
echo "/sbin/modprobe" > /proc/sys/kernel/modprobe

# parse the kernel command line
parse_cmdline

# if available, start udevd at this stage
if [ -x /sbin/udevd ]; then
    msg -n ":: Starting udevd..."
    udevd --daemon --resolve-names=never
    udevd_running=1
    msg "done."
else
    udevd_running=0
fi

if [ -n "${disablehooks}" ]; then
    for d in $(echo "${disablehooks}" | sed 's|,| |g'); do
        eval "hook_${d}=disabled"
    done
fi

earlymodules=${earlymodules//,/ }
if [ -n "${earlymodules## }" ]; then
    modprobe -qab ${earlymodules}
fi

. /config

[ -n "${MODULES## }" ] && modprobe -qab $MODULES

# If rootdelay is empty or not a non-negative integer, set it to 10
if [ -z "${rootdelay}" ] || ! [ "${rootdelay}" -ge 0 ]; then
    rootdelay=10
fi

if [ -e "/hooks" ]; then
    for h in ${HOOKS}; do
        TST=""
        eval "TST=\$hook_${h}"
        if [ "${TST}" != "disabled" ]; then
            run_hook () { msg "${h}: no run function defined"; }
            if [ -e "/hooks/${h}" ]; then
               . /hooks/${h}
               msg ":: Running Hook [${h}]"
               run_hook
            fi
        fi
    done
fi

if [ "${break}" = "y" ]; then
    echo ":: Break requested, type 'exit' to resume operation"
    launch_interactive_shell
fi

msg -n ":: Starting telnet daemon..."
telnetd
msg "done."

if [ -f "/message" ]; then
    msg "$(cat /message)"
fi

# Save root device in /etc
echo $root > /etc/cfg_root

# Mount root at /cfg_root
mkdir -p /cfg_root
${mount_handler:-default_mount_handler} /cfg_root

if [ "$(stat -c %D /)" = "$(stat -c %D /cfg_root)" ]; then
    err "Failed to mount the config root device."
    echo
elif [ ! -x "/cfg_root/iscsi-target-etc" ]; then
    err "Config root device mounted successfully, but config dir does not exist."
else
    msg ":: Update files in /etc"
    cp -r -f -H /cfg_root/iscsi-target-etc/* /etc/
fi

umount -r /cfg_root &>/dev/nul
rmdir /cfg_root &>/dev/nul

echo ":: Starting system loggers"
syslogd
klogd

# Auto generate fstab
cat /proc/mounts > /etc/fstab
ln -s /proc/mounts  /etc/mtab

/linuxrc
